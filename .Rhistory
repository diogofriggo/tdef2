autoplot(hyndsight) +
autolayer(fc, series="HW multi damped", PI=F) +
guides(colour=guide_legend(title="Daily forecasts"))
fc <- hw(subset(hyndsight, end=length(hyndsight)-l), damped=F, seasonal="multiplicative", h=l)
autoplot(hyndsight) +
autolayer(fc, series="HW multi damped", PI=F) +
guides(colour=guide_legend(title="Daily forecasts"))
fc <- hw(subset(hyndsight,end=length(hyndsight)-35),
damped = TRUE, seasonal="multiplicative", h=35)
autoplot(hyndsight) +
autolayer(fc, series="HW multi damped", PI=FALSE)+
guides(colour=guide_legend(title="Daily forecasts"))
fc <- hw(subset(hyndsight,end=length(hyndsight)-120),
damped = TRUE, seasonal="multiplicative", h=120)
autoplot(hyndsight) +
autolayer(fc, series="HW multi damped", PI=FALSE)+
guides(colour=guide_legend(title="Daily forecasts"))
fc <- hw(subset(hyndsight,end=length(hyndsight)-120),
damped = F, seasonal="multiplicative", h=120)
fc <- hw(subset(hyndsight,end=length(hyndsight)-120),
damped = F, seasonal="multiplicative", h=120)
autoplot(hyndsight) +
autolayer(fc, series="HW multi damped", PI=FALSE)+
guides(colour=guide_legend(title="Daily forecasts"))
fc <- hw(subset(hyndsight,end=length(hyndsight)-120),
damped = F, seasonal="additive", h=120)
autoplot(hyndsight) +
autolayer(fc, series="HW multi damped", PI=FALSE)+
guides(colour=guide_legend(title="Daily forecasts"))
aust <- window(austourists, end=2008)
fit1 <- hw(aust, seasonal="additive", h=32, damped=F)
fit2 <- hw(aust, seasonal="multiplicative", h=32, damped=F)
autoplot(austourists) +
autolayer(fit1, series="HW additive forecasts", PI=F) +
autolayer(fit2, series="HW multiplicative forecasts", PI=F) +
ylab("Visitor nights (millions)") +
ggtitle("International visitors nights in Australia") +
guides(colour=guide_legend(title="Forecast"))
l <- 120
fc <- hw(subset(hyndsight, end=length(hyndsight)-l), damped=F, seasonal="multiplicative", h=l)
autoplot(hyndsight) +
autolayer(fc, series="HW multi damped", PI=F) +
guides(colour=guide_legend(title="Daily forecasts"))
aust <- window(austourists, start=2005)
fit <- ets(aust)
summary(fit)
autoplot(fit)
cbind('Residuals' = residuals(fit),
'Forecast errors'= residuals(fit, type='response')) %>%
autoplot(facet=T + xlab('Year') + ylab(''))
cbind('Residuals' = residuals(fit),
'Forecast errors'= residuals(fit, type='response')) %>%
autoplot(facet=T + xlab('Year') + ylab(''))
cbind('Residuals' = residuals(fit), 'Forecast errors'= residuals(fit, type='response')) %>%
autoplot(facet=T) + xlab('Year') + ylab('')
fit %>% forecast(h=8) %>% autoplot() +
ylab("International visitor night in Australia (millions)")
fit %>% forecast(h=8) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data", PI=F) +
ylab("International visitor night in Australia (millions)")
aust <- window(austourists, end=2010)
fit <- ets(aust)
fit %>% forecast(h=8) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data", PI=F) +
ylab("International visitor night in Australia (millions)")
fit %>% forecast(h=20) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data", PI=F) +
ylab("International visitor night in Australia (millions)")
fit %>% forecast(h=20) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data", PI=F) +
ylab("International visitor night in Australia (millions)")
aust <- window(austourists, end=2000)
aust <- window(austourists, end=2000)
fit <- ets(aust)
fit %>% forecast(h=20) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data", PI=F) +
ylab("International visitor night in Australia (millions)")
aust <- window(austourists, end=2002)
fit <- ets(aust)
fit %>% forecast(h=20) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data", PI=F) +
ylab("International visitor night in Australia (millions)")
aust <- window(austourists, end=2004)
fit <- ets(aust)
fit %>% forecast(h=20) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data") +
ylab("International visitor night in Australia (millions)")
austourists
aust <- window(austourists, end=2008)
fit <- ets(aust)
fit %>% forecast(h=20) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data") +
ylab("International visitor night in Australia (millions)")
fit %>% forecast(h=40) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data") +
ylab("International visitor night in Australia (millions)")
fit %>% forecast(h=35) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data") +
ylab("International visitor night in Australia (millions)")
aust <- window(austourists, end=2006)
fit <- ets(aust)
fit %>% forecast(h=35) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data") +
ylab("International visitor night in Australia (millions)")
aust <- window(austourists, end=2005)
fit <- ets(aust)
fit %>% forecast(h=35) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data") +
ylab("International visitor night in Australia (millions)")
aust <- window(austourists, end=2007)
fit <- ets(aust)
fit %>% forecast(h=35) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data") +
ylab("International visitor night in Australia (millions)")
aust <- window(austourists, end=2008)
fit <- ets(aust)
fit %>% forecast(h=35) %>% autoplot(series='Fitted') +
autolayer(austourists, series="Data") +
ylab("International visitor night in Australia (millions)")
Box.test(diff(goog200), lag=10, type='Ljung-Box')
gridExtra::grid.arrange(ggAcf(goog200), ggAcf(diff(goog200)))
a10
cbind("Sales ($million)" = a10,
"Monthly log sales" = log(a10),
"Annual change in log sales" = diff(log(a10), 12)) %>%
autoplot(facet=T) + xlab("Year") + ylab("") +
ggtitle("Antidiabetic drug sales")
gridExtra::grid.arrange(ggAcf(a10), ggAcf(log(a10)), ggAcf(diff(log(a10), 12))
gridExtra::grid.arrange(ggAcf(a10), ggAcf(log(a10)), ggAcf(diff(log(a10), 12)))
gridExtra::grid.arrange(
ggAcf(a10),
ggAcf(log(a10)),
ggAcf(diff(log(a10), 12)),nrow=3)
lag = 20
Box.test(a10, lag=lag, type='Ljung-Box')
Box.test(log(a10), lag=lag, type='Ljung-Box')
Box.test(diff(log(a10), 12)), lag=lag, type='Ljung-Box')
lag = 20
Box.test(a10, lag=lag, type='Ljung-Box')
Box.test(log(a10), lag=lag, type='Ljung-Box')
Box.test(diff(log(a10), 12), lag=lag, type='Ljung-Box')
lag = 1
Box.test(a10, lag=lag, type='Ljung-Box')
Box.test(log(a10), lag=lag, type='Ljung-Box')
Box.test(diff(log(a10), 12), lag=lag, type='Ljung-Box')
cbind("Billion Kwh" = usmelec,
"Logs" = log(usmelec),
"Seasonally\n differenced logs" = diff(log(usmelec), 12),
"Doubly\n differenced logs" = diff(diff(log(usmelec), 12))) %>%
autoplot(facets=T) +
xlab("Year") + ylab("") +
ggtitle("Monthly US net electricity generation")
library(urca)
goog %>% ur.kpss() %>% summary()
goog %>% diff() %>% ur.kpss() %>% summary()
ndiffs(goog)
nsdiffs(goog)
nsdiffs(elecsales)
nsdiffs(elecequip)
usmelec %>% nsdiffs()
usmelec %>% diff() %>% nsdiffs()
usmelec %>% nsdiffs()
usmelec %>% diff(lag=12) %>% nsdiffs()
usmelec %>% log() %>% nsdiffs()
usmelec %>% log() %>% diff(lag=12) %>% nsdiffs()
library(tidyverse)
library(lubridate)
library(forecast)
library(FinTS)
library(tseries)
library(rugarch)
library(chron)
setwd('/home/diogo/Jupyter/tdef')
path <- '/home/diogo/Jupyter/tdef/Res025_ERA5.txt'
my_accuracy <- function(forecast, observed){
accuracy(forecast, observed[(length(observed)-length(forecast)+1):length(observed)])
}
garch_plot <- function(data, modelroll, title, filename, multiplier, forecast_length){
measured <- data[(length(data)-multiplier*forecast_length):(length(data)-1)]
print(measured %>% length())
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(30%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(10%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(70%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(90%)']
print(forecast.mean %>% length())
print(forecast_length)
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(measured)+1):length(ggplot.data),]
# ggplot(data=df2, aes(x=time)) +
#   geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
#   geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
#   geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
#   scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
#   scale_color_manual(values = c('gold','black'))+
#   labs(x='Tempo', y='Velocidade (m/s)') +
#   ggtitle(title)
#
# ggsave(paste('thesis/images', filename, sep='/'))
# print(my_accuracy(forecast.mean, measured))
my_accuracy(forecast.mean, measured)
}
do_hourly_garch <- function(path, forecast_length){
data <- read_table2(path, skip=9, comment="--") %>%
tail(-3) %>%
mutate(time=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(hour=hour(time), day=date(time), month=month(time,label=TRUE, abbr=FALSE), year=year(time)) %>%
mutate(year_month = paste(year, month)) %>%
rename(speed=c_ws)
hourly.data <- data[(nrow(data)-365*24):nrow(data),]$speed
print(hourly.data %>% length())
ugarch_spec <- ugarchspec(variance.model = list(model='gjrGARCH', garchOrder = c(1,1)),
mean.model = list(armaOrder = c(1,0), include.mean = T),
distribution.model =  "sstd")
modelroll <- ugarchroll (
spec=ugarch_spec, data=hourly.data, n.ahead = 1, forecast_length = forecast_length,
n.start = NULL, refit.every = 50, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = T, VaR.alpha = c(0.3, 0.7, 0.1, 0.90),
cluster = NULL, keep.coef = F
)
list(hourly.data, modelroll)
}
forecast_length <- 24*7
result <- do_hourly_garch(path, forecast_length)
hourly.data <- result[[1]]
modelroll <- result[[2]]
title <- paste('GARCH(1,1) com janela de 50 horas e passo de 1 hora')
garch_plot(hourly.data, modelroll, title, 'garch_first.png', 4, forecast_length)
root = '/home/diogo/Downloads/ERA5'
files <- list.files(path=root, pattern="*.txt", full.names=TRUE, recursive=FALSE)[c(1,2)]
acc_list <- lapply(files, function(path) {
acc_list <- c()
print(path)
forecast_length <- 24*7
result <- do_hourly_garch(path, forecast_length)
hourly.data <- result[[1]]
modelroll <- result[[2]]
title <- paste('GARCH(1,1) com janela de 50 horas e passo de 1 hora')
acc <- garch_plot(hourly.data, modelroll, title, 'garch_first.png', 4, forecast_length)
acc_list <- c(acc_list, acc)
acc_list
})
acc_list
root = '/home/diogo/Downloads/ERA5'
files <- list.files(path=root, pattern="*.txt", full.names=TRUE, recursive=FALSE)[c(1,2)]
acc_list <- lapply(files, function(path) {
acc_list <- c()
print(path)
forecast_length <- 24*7
result <- do_hourly_garch(path, forecast_length)
hourly.data <- result[[1]]
modelroll <- result[[2]]
title <- paste('GARCH(1,1) com janela de 50 horas e passo de 1 hora')
acc <- garch_plot(hourly.data, modelroll, title, 'garch_first.png', 4, forecast_length)
acc_list <- c(acc_list, list(path, acc))
acc_list
})
acc_list
acc_list[[2]]
tibble(acc_list[[2]])
acc_list[[2]]
acc_list[[2]][[2]]
tibble(acc_list[[2]][[2]])
acc_list[[2]][[2]] %>% str()
tibble(acc_list[[2]][[2]])
acc_list[[:]][[1]]
acc_list[[,1]]
acc_list[[1,]]
acc_list[[1,2]]
acc_list[[1]][[,]]
acc_list[[1]]
acc_list[[1]][[2]]
acc_list[[1]][[2]] %>% str()
acc_list[[1]][[2]]['Test set']
acc_list[[1]][[2]][['Test set']]
acc_list[[1]][[2]]$'Test set']
acc_list[[1]][[2]]$'Test set'
acc_list[[1]][[2]]
type
acc_list[[1]][[2]] %>% str()
acc_list[[1]][[2]]$dimnames
attr(acc_list[[1]][[2]],'dimnames')
attr(acc_list[[1]][[2]],'dimnames')[[1]] %>% str()
attr(acc_list[[1]][[2]],'dimnames')[[2]] %>% str()
?tibble
acc_list[[1]][[2]]
acc_list[[1]][[2]] %>% as.tibble()
acc_list[[1]][[2]] %>% as_tibble()
tibbie <- acc_list[[1]][[2]] %>% as_tibble()
tibbie['path'] <- 'ahhaha'
tibbie
tibbie <- acc_list[[1]][[2]] %>% as_tibble()
tibbie$path <- 'ahhaha'
tibbie
bind_rows(tibbie1, tibbie2)
tibbie1 <- acc_list[[1]][[2]] %>% as_tibble()
tibbie$path <- '1'
tibbie2 <- acc_list[[2]][[2]] %>% as_tibble()
tibbie$path <- '2'
bind_rows(tibbie1, tibbie2)
bind_rows(list(tibbie1, tibbie2))
bind_rows(c(tibbie1, tibbie2))
tibbie1 <- acc_list[[1]][[2]] %>% as_tibble()
tibbie$path <- '1'
tibbie2 <- acc_list[[2]][[2]] %>% as_tibble()
append(tibbie1, tibbie2)
tibbies <- list()
tibbie1 <- acc_list[[1]][[2]] %>% as_tibble()
tibbie$path <- '1'
tibbie2 <- acc_list[[2]][[2]] %>% as_tibble()
append(tibbies, tibbie1)
append(tibbies, tibbie2)
tibbies
tibbies <- list()
tibbie1 <- acc_list[[1]][[2]] %>% as_tibble()
tibbie$path <- '1'
tibbie2 <- acc_list[[2]][[2]] %>% as_tibble()
tibbies <- append(tibbies, tibbie1)
tibbies <- append(tibbies, tibbie2)
tibbies
tibbies <- c()
tibbie1 <- acc_list[[1]][[2]] %>% as_tibble()
tibbie$path <- '1'
tibbie2 <- acc_list[[2]][[2]] %>% as_tibble()
tibbies <- c(tibbies, tibbie1)
tibbies <- c(tibbies, tibbie2)
tibbies
tibbies <- list()
tibbie1 <- acc_list[[1]][[2]] %>% as_tibble()
tibbie$path <- '1'
tibbie2 <- acc_list[[2]][[2]] %>% as_tibble()
tibbie$path <- '2'
append(tibbies, tibbie1)
tibbies
tibbies <- list()
tibbie1 <- acc_list[[1]][[2]] %>% as_tibble()
tibbie$path <- '1'
tibbie2 <- acc_list[[2]][[2]] %>% as_tibble()
tibbie$path <- '2'
tibbies <- append(tibbies, tibbie1)
tibbies
c(tibbie1,tibbie2)
bind_rows(tibbie1, tibbie2)
tibbie1
bind_rows(tibbie1, tibbie2)
tibbies <- tibble()
tibbies <- tibble()
tibbie1 <- acc_list[[1]][[2]] %>% as_tibble()
tibbie$path <- '1'
tibbies <- bind_rows(tibbie, tibbie1)
tibbie2 <- acc_list[[2]][[2]] %>% as_tibble()
tibbie$path <- '2'
tibbies <- bind_rows(tibbie, tibbie2)
tibbies
tibbies <- tibble()
tibbie1 <- acc_list[[1]][[2]] %>% as_tibble()
tibbie$path <- '1'
tibbies <- bind_rows(tibbie, tibbie1)
tibbie2 <- acc_list[[2]][[2]] %>% as_tibble()
tibbie2$path <- '2'
tibbies <- bind_rows(tibbie, tibbie2)
tibbies
root = '/home/diogo/Downloads/ERA5'
files <- list.files(path=root, pattern="*.txt", full.names=TRUE, recursive=FALSE)[c(1,2)]
tibbies <- lapply(files, function(path) {
tibbies <- tibble()
print(path)
forecast_length <- 24*7
result <- do_hourly_garch(path, forecast_length)
hourly.data <- result[[1]]
modelroll <- result[[2]]
title <- paste('GARCH(1,1) com janela de 50 horas e passo de 1 hora')
tibbie <- garch_plot(hourly.data, modelroll, title, 'garch_first.png', 4, forecast_length) %>% as_tibble()
tibbie$path <- path
tibbies <- bind_rows(tibbies, tibbie)
})
tibbies
tibbies
root <- '/home/diogo/Downloads/ERA5'
files <- list.files(path=root, pattern="*.txt", full.names=TRUE, recursive=FALSE)[c(1,2)]
result <- lapply(files, function(path) {
tibbies <- tibble()
print(path)
forecast_length <- 24*7
result <- do_hourly_garch(path, forecast_length)
hourly.data <- result[[1]]
modelroll <- result[[2]]
title <- paste('GARCH(1,1) com janela de 50 horas e passo de 1 hora')
tibbie <- garch_plot(hourly.data, modelroll, title, 'garch_first.png', 4, forecast_length) %>% as_tibble()
tibbie$path <- path
tibbies <- bind_rows(tibbies, tibbie)
tibbies
})
result
root <- '/home/diogo/Downloads/ERA5'
files <- list.files(path=root, pattern="*.txt", full.names=TRUE, recursive=FALSE)[c(1,2)]
tibbies <- tibble()
lapply(files, function(path) {
print(path)
forecast_length <- 24*7
result <- do_hourly_garch(path, forecast_length)
hourly.data <- result[[1]]
modelroll <- result[[2]]
title <- paste('GARCH(1,1) com janela de 50 horas e passo de 1 hora')
tibbie <- garch_plot(hourly.data, modelroll, title, 'garch_first.png', 4, forecast_length) %>% as_tibble()
tibbie$path <- path
tibbies <- bind_rows(tibbies, tibbie)
})
tibbies
tibbies
tibbies
root <- '/home/diogo/Downloads/ERA5'
paths <- list.files(path=root, pattern="*.txt", full.names=TRUE, recursive=FALSE)[c(1,2)]
tibbies <- tibble()
for(path in paths){
print(path)
forecast_length <- 24*7
result <- do_hourly_garch(path, forecast_length)
hourly.data <- result[[1]]
modelroll <- result[[2]]
title <- paste('GARCH(1,1) com janela de 50 horas e passo de 1 hora')
tibbie <- garch_plot(hourly.data, modelroll, title, 'garch_first.png', 4, forecast_length) %>% as_tibble()
tibbie$path <- path
tibbies <- bind_rows(tibbies, tibbie)
}
tibbies
path
path.replace
replace(path, '_ERA5', '')
str_replace(path, '_ERA5', '')
str_split(path, '/')
str_split(path, '/')[-1]
str_split(path, '/')[[-1]]
str_split(path, '/') %>% tail()
str_split(path, '/')[[1]] %>% tail()
str_split(path, '/')[[1]] %>% str()
str_split(path, '/')[[1]] %>% tail(1)
str_split(path, '/') %>% tail(1)
str_split(path, '/')[[1]] %>% tail(1)
str_split(path, '/')[[1]] %>% tail(1) %>% str_replace('_ERA5', '') %>% str_replace('.txt', '')
for(path in paths){
print(path)
forecast_length <- 24*7
result <- do_hourly_garch(path, forecast_length)
hourly.data <- result[[1]]
modelroll <- result[[2]]
title <- paste('GARCH(1,1) com janela de 50 horas e passo de 1 hora')
tibbie <- garch_plot(hourly.data, modelroll, title, 'garch_first.png', 4, forecast_length) %>% as_tibble()
tibbie$path <- str_split(path, '/')[[1]] %>% tail(1) %>% str_replace('_ERA5', '') %>% str_replace('.txt', '')
tibbies <- bind_rows(tibbies, tibbie)
}
root <- '/home/diogo/Downloads/ERA5'
paths <- list.files(path=root, pattern="*.txt", full.names=TRUE, recursive=FALSE)[c(1,2)]
tibbies <- tibble()
for(path in paths){
print(path)
forecast_length <- 24*7
result <- do_hourly_garch(path, forecast_length)
hourly.data <- result[[1]]
modelroll <- result[[2]]
title <- paste('GARCH(1,1) com janela de 50 horas e passo de 1 hora')
tibbie <- garch_plot(hourly.data, modelroll, title, 'garch_first.png', 4, forecast_length) %>% as_tibble()
tibbie$path <- str_split(path, '/')[[1]] %>% tail(1) %>% str_replace('_ERA5', '') %>% str_replace('.txt', '')
tibbies <- bind_rows(tibbies, tibbie)
}
tibbies
ptm <- proc.time()
root <- '/home/diogo/Downloads/ERA5'
paths <- list.files(path=root, pattern="*.txt", full.names=TRUE, recursive=FALSE)
tibbies <- tibble()
for(path in paths){
print(path)
forecast_length <- 24*7
result <- do_hourly_garch(path, forecast_length)
hourly.data <- result[[1]]
modelroll <- result[[2]]
title <- paste('GARCH(1,1) com janela de 50 horas e passo de 1 hora')
tibbie <- garch_plot(hourly.data, modelroll, title, 'garch_first.png', 4, forecast_length) %>% as_tibble()
tibbie$path <- str_split(path, '/')[[1]] %>% tail(1) %>% str_replace('_ERA5', '') %>% str_replace('.txt', '')
tibbies <- bind_rows(tibbies, tibbie)
}
tibbies
proc.time() - ptm
tibbies %>% length()
paths %>% length()
ptm <- proc.time()
root <- '/home/diogo/Downloads/ERA5'
paths <- list.files(path=root, pattern="*.txt", full.names=TRUE, recursive=FALSE)
tibbies <- tibble()
for(path in paths){
print(path)
forecast_length <- 24*7
result <- do_hourly_garch(path, forecast_length)
hourly.data <- result[[1]]
modelroll <- result[[2]]
title <- paste('GARCH(1,1) com janela de 50 horas e passo de 1 hora')
tibbie <- garch_plot(hourly.data, modelroll, title, 'garch_first.png', 4, forecast_length) %>% as_tibble()
tibbie$path <- str_split(path, '/')[[1]] %>% tail(1) %>% str_replace('_ERA5', '') %>% str_replace('.txt', '')
tibbies <- bind_rows(tibbies, tibbie)
}
paths %>% length()
proc.time() - ptm
tibbies
out_path <- '/home/diogo/Jupyter/tdef/result.csv'
write_delim(tibbies, out_path)
