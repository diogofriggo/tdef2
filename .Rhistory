wind <- data$speed
wind2 <- wind[(length(wind)-365*24):length(wind)]
data
data %>%
ggplot(aes(nw_ws)) +
geom_histogram(binwidth=0.3, fill="blue", alpha=.2, col='darkgrey') +
xlab('Velocidade (m/s)') + ylab('Frequência')
ggsave('weibull_histogram.png')
png('thesis/images/normal_overlay.png')
g = data$nw_ws
m<-mean(g)
std<-sqrt(var(g))
hist(g, density=20, breaks=20, prob=TRUE,
xlab="Velocidade (m/s)", ylab='Densidade', ylim=c(0, 0.2),
main='Curva normal superposta ao histograma de velocidades')
curve(dnorm(x, mean=m, sd=std),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
dev.off()
descdist(wind2, discrete = FALSE)
library(forecast)
library(tidyverse)
library(lubridate)
library(tidyverse)
library(forecast)
library(fpp)
library(fpp2)
require(gridExtra)
library(fitdistrplus)
library(logspline)
setwd('/home/diogo/Jupyter/tdef')
path <- '/home/diogo/Jupyter/tdef/Res025_ERA5.txt'
data <- read_table2(path, skip=9, comment="--") %>%
tail(-3) %>%
mutate(time=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(hour=hour(time), day=date(time), month=month(time,label=TRUE, abbr=FALSE), year=year(time)) %>%
mutate(year_month = paste(year, month)) %>%
rename(speed=c_ws)
data[(nrow(data)-365*24*2):nrow(data),] %>%
mutate(time=as_date(time)) %>%
ggplot() + geom_line(aes(time, speed)) +
scale_x_date(date_labels = "%b %y", date_breaks = "month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = 'Tempo (hora)', y = 'Velocidade (m/s)') +
ggtitle('Velocidade do vento em base horária')
library(forecast)
library(tidyverse)
library(lubridate)
library(tidyverse)
library(forecast)
library(fpp)
library(fpp2)
require(gridExtra)
library(fitdistrplus)
library(logspline)
setwd('/home/diogo/Jupyter/tdef2')
path <- '/home/diogo/Jupyter/tdef2/Res025_ERA5.txt'
data <- read_table2(path, skip=9, comment="--") %>%
tail(-3) %>%
mutate(time=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(hour=hour(time), day=date(time), month=month(time,label=TRUE, abbr=FALSE), year=year(time)) %>%
mutate(year_month = paste(year, month)) %>%
rename(speed=c_ws)
data[(nrow(data)-365*24*2):nrow(data),] %>%
mutate(time=as_date(time)) %>%
ggplot() + geom_line(aes(time, speed)) +
scale_x_date(date_labels = "%b %y", date_breaks = "month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = 'Tempo (hora)', y = 'Velocidade (m/s)') +
ggtitle('Velocidade do vento em base horária')
ggsave('thesis/images/entire_series_hourly_basis.png')
plot_model <- function(data, order, test.size, window.size){
forecast.horizon <- 1
data <- data[(length(data)-test.size):length(data)]
forecast.lower80 <- c()
forecast.lower95 <- c()
forecast.mean <- c()
forecast.upper80 <- c()
forecast.upper95 <- c()
for(k in 0:(length(data)-window.size)) {
train <- data[(1+k):(window.size+k)]
result <- forecast(Arima(ts(train), order=order), h=forecast.horizon)
forecast.lower80 <- c(forecast.lower80, result$lower[1])
forecast.lower95 <- c(forecast.lower95, result$lower[2])
forecast.mean <- c(forecast.mean, result$mean[1])
forecast.upper80 <- c(forecast.upper80, result$upper[1])
forecast.upper95 <- c(forecast.upper95, result$upper[2])
}
ggplot.data <- c(data[1:length(data)], forecast.mean)
type <- c(rep('measured', length(data)), rep('forecast', length(forecast.mean)))
time <- c(1:length(data), (length(data)-length(forecast.mean)+1):length(data))
nans <- rep(NA, length(data))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(data)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black'))
}
#auto.arima(ts(data$speed))
plot_model(data$speed, c(1,1,0), 24*7*2, 24*7)
ggsave('thesis/images/plot_model.png')
my_accuracy <- function(forecast, observed){
accuracy(forecast, observed[(length(observed)-length(forecast)+1):length(observed)])
}
plot_model <- function(data, order, window.size, test.size=NULL, forecast.horizon=1, singular='hora', plural='horas'){
if(is.null(test.size)){
test.size <- length(data)-window.size
}
data <- data[(length(data)-test.size):length(data)]
#data[-(1:(length(data) %% forecast.horizon))] #this ensure data is a multiple of forecast.horizon
forecast.lower80 <- c()
forecast.lower95 <- c()
forecast.mean <- c()
forecast.upper80 <- c()
forecast.upper95 <- c()
for(k in seq(0, length(data)-window.size, forecast.horizon)) {
#print(paste(length(data), 1+k, window.size+k, window.size+k+1, window.size+k+forecast.horizon))
train <- data[(1+k):(window.size+k)]
result <- forecast(Arima(ts(train), order=order), h=forecast.horizon)
#print('everything is ok before this')
forecast.lower80 <- c(forecast.lower80, result$lower[,1])
forecast.lower95 <- c(forecast.lower95, result$lower[,2])
forecast.mean <- c(forecast.mean, result$mean)
forecast.upper80 <- c(forecast.upper80, result$upper[,1])
forecast.upper95 <- c(forecast.upper95, result$upper[,2])
}
ggplot.data <- c(data[1:length(data)], forecast.mean)
type <- c(rep('measured', length(data)), rep('forecast', length(forecast.mean)))
time <- c(1:length(data), (length(data)-length(forecast.mean)+1):length(data))
nans <- rep(NA, length(data))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(data)+1):length(ggplot.data),]
print(my_accuracy(forecast.mean, data))
base <- if (forecast.horizon==1) singular else plural
model.desc <- paste('ARIMA(', order[1], ',', order[2], ',', order[3], ')', sep='')
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black')) +
labs(x='Tempo', y='Velocidade (m/s)') +
ggtitle(paste('Previsão de', test.size, plural, 'passo=', forecast.horizon, base, ',', model.desc, 'com janela', window.size, plural))
}
week_data <- data[(nrow(data)-24*7*3):nrow(data),]$speed %>% diff() %>% ts()
Arima(week_data, order=c(6,1,3)) %>% autoplot()
ggsave('thesis/images/conds.png')
Arima(week_data, order=c(1,1,1)) %>% autoplot()
Arima(week_data, order=c(1,1,1)) %>% autoplot()
Arima(week_data, order=c(2,1,2)) %>% autoplot()
Arima(week_data, order=c(2,1,3)) %>% autoplot()
p1 <- plot_model(data$speed, c(1,1,1), test.size=24*7*2, window.size=24*7, forecast.horizon=1)
p2 <- plot_model(data$speed, c(2,1,1), test.size=24*7*2, window.size=24*7, forecast.horizon=1)
ggsave('thesis/images/arima12.png', arrangeGrob(p1, p2))
p3 <- plot_model(data$speed, c(1,1,2), test.size=24*7*2, window.size=24*7, forecast.horizon=1)
p4 <- plot_model(data$speed, c(2,1,3), test.size=24*7*2, window.size=24*7, forecast.horizon=1)
ggsave('thesis/images/arima34.png', arrangeGrob(p3, p4))
library(tidyverse)
library(lubridate)
library(forecast)
library(urca)
library(fpp)
setwd('/home/diogo/Jupyter/tdef')
path <- '/home/diogo/Jupyter/tdef/Res025_ERA5.txt'
era5 <- read_table2(path, skip=9, comment="--")
tail(era5,-3) %>%
mutate(stamp=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(hour=hour(stamp), month=month(stamp,label=TRUE, abbr=FALSE)) %>%
group_by(month, hour) %>%
summarize(speed = mean(c_ws, na.rm = T)) %>%
rename(`Mês`=month, Hora=hour, Velocidade=speed) %>%
ggplot() + geom_smooth(aes(Hora, Velocidade, color=`Mês`), se = F) + scale_x_discrete(limits=0:23)
library(tidyverse)
library(lubridate)
library(forecast)
library(urca)
library(fpp)
setwd('/home/diogo/Jupyter/tdef')
path <- '/home/diogo/Jupyter/tdef2/Res025_ERA5.txt'
era5 <- read_table2(path, skip=9, comment="--")
tail(era5,-3) %>%
mutate(stamp=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(hour=hour(stamp), month=month(stamp,label=TRUE, abbr=FALSE)) %>%
group_by(month, hour) %>%
summarize(speed = mean(c_ws, na.rm = T)) %>%
rename(`Mês`=month, Hora=hour, Velocidade=speed) %>%
ggplot() + geom_smooth(aes(Hora, Velocidade, color=`Mês`), se = F) + scale_x_discrete(limits=0:23)
tail(era5)
nsdiffs(era5$c_ws)
nsdiffs(elecequip)
nsdiffs(usmelec)
era5$c_ws
era5['c_ws']
elecequip
usmelec
AirPassengers
euretail
h02
class(h02)
class(era5$c_ws)
?ts
?msts
#frequency is the number of observations per season
#if my season is a day then there are 24 observations per season
#if my season is a week then there are 24*7 observations per season
#if my season is a month then there are 24*30.44 observations per season
#if my season is a year then there are 24*365.25 observations per season
data <- tail(era5$c_ws, n=365*24*4)
data <- ts(data)
data %>% ggtsdisplay()
data %>% diff() %>% ggtsdisplay()
data %>%  diff() %>% ggtsdisplay(lag.max=100)
data %>%  diff(lag=365.25*24) %>% ggtsdisplay(lag.max=100)
#data <- msts(data, seasonal.periods=c(24, 168, 8766))
data <- diff(data, lag=365.25*24)
#BoxCox.lambda(data)
data <- BoxCox(data, lambda = 1.030897)
data
data %>% ggtsdisplay()
data %>% diff() %>% ggtsdisplay(lag.max=40)
data %>% diff(lag=365*24) %>% diff() %>% ggtsdisplay(lag.max=120)
data %>% diff(lag=365.25*24) %>% ggtsdisplay(lag.max=120)
nsdiffs(data)
#autoplot(taylor)
#taylor %>% tbats() %>% forecast() %>% autoplot()
c(24, 24*7, 365.25*24)
data  %>%
Arima(order=c(5,1,2), seasonal=c(0,1,1)) %>%
residuals() %>% ggtsdisplay()
data <- tail(era5$c_ws, n=365*24*3)
#data <- msts(data, seasonal.periods=c(24, 168, 8766))
data <- ts(data)
k = 10
train <- window(data, end=length(data)-k)
test <- window(data, start=length(data)-k)
other <- window(train, start=length(train)-100)
auto.arima(other)
other %>% Arima(order=c(1,0,2), seasonal=c(0,1,2)) %>%
forecast() %>% autoplot() +
autolayer(test, series='Observed') +
ggtitle("title") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
attributes(result)
l <- length(result$fitted)
result$fitted <- result$fitted[l-20:l]
result$x <- result$x[l-20:l]
result %>% autoplot()
result$x
window.size <- 24*7
forecast.horizon <- 1
raw.data <- era5$c_ws
end <- length(raw.data)
start <- end-24*7*2
data <- raw.data[start:end]
forecast.lower80 <- c()
forecast.lower95 <- c()
forecast.mean <- c()
forecast.upper <- c()
forecast.upper80 <- c()
forecast.upper95 <- c()
p <- c()
d <- c()
q <- c()
for(k in 0:(length(data)-window.size)) {
train <- data[(1+k):(window.size+k)]
model <- auto.arima(train)
print(c(k,length(data)-window.size,as.character(model)))
result <- forecast(model, h=forecast.horizon)
forecast.lower80 <- c(forecast.lower80, result$lower[1])
forecast.lower95 <- c(forecast.lower95, result$lower[2])
forecast.mean <- c(forecast.mean, result$mean[1])
forecast.upper80 <- c(forecast.upper80, result$upper[1])
forecast.upper95 <- c(forecast.upper95, result$upper[2])
r <- str_match(as.character(model), "ARIMA\\((\\d),(\\d),(\\d)\\)")
p <- c(p, r[2])
d <- c(d, r[3])
q <- c(q, r[4])
}
#measured.series <- ts(data)
#forecast.mean$lower <- forecast.lower
#forecast.mean$upper <- forecast.upper
result <- c()
result$x <-ts(data)
result$mean <- ts(forecast.mean, start=window.size)
result$lower <- ts.union('80%'=ts(forecast.lower80, start=window.size), '95%'=ts(forecast.lower95, start=window.size))
result$upper <- ts.union('80%'=ts(forecast.upper80, start=window.size), '95%'=ts(forecast.upper95, start=window.size))
result$level <- c(80, 95)
class(result) <- "forecast"
result %>%  autoplot(series='Forecast') +
autolayer(ts(data), series = 'Measured')
ggplot.data <- c(data, forecast.mean)
type <- c(rep('measured', length(data)), rep('forecast', length(forecast.mean)))
time <- c(1:length(data), (length(data)-length(forecast.mean)+1):length(data))
nans <- rep(NA, length(data))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(data)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
#geom_ribbon(aes(ymin=lower95, ymax=upper95), fill = '#C3C3F6') +
#geom_ribbon(aes(ymin=lower80, ymax=upper80), fill = '#7D7DEF') +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black'))
ggsave('thesis/images/var_result.png')
my_accuracy <- function(forecast, observed){
accuracy(forecast, observed[(length(observed)-length(forecast)+1):length(observed)])
}
my_accuracy(forecast.mean, data)
data
forecast.mean
#green #00BA38
#red #F8766D
#95: #C3C3F6
#80: #7D7DEF
#dark green #02401B
library(RColorBrewer)
display.brewer.all(colorblindFriendly = TRUE)
#install.packages('wesanderson')
library(wesanderson)
names(wes_palettes)
df1 %>% ggplot(aes(x=time)) +
geom_line(aes(y=speed, colour=type), size=0.9)
autoplot(model)
#library(stringr)
str_locate("ARIMA(2,1,3)", "ARIMA(\d,\d,\d)")
str_extract("ARIMA(2,1,3)", "ARIMA(\d,\d,\d)")
regmatches("ARIMA(2,1,3)",regexpr("ARIMA(\\d,\\d,\\d)",txt))
tibble(time=1:length(p), p=p, d=d, q=q) %>%
ggplot(aes(as.integer(p), as.integer(q))) +
geom_jitter(aes(colour=time), width=0.3, height=0.3, size=2) +
#geom_jitter(aes(colour=time), width=0.3, height=0.3) +
#geom_path(aes(colour=time), position=position_jitter()) +
#scale_color_gradientn(colours=c("navyblue", "blue", "darkmagenta", "darkorange1"))
#scale_color_continuous(limits=c(1, 170), breaks=seq(1, 200, by=50)) +
#scale_size_continuous(limits=c(170, 1), breaks=seq(200, 1, by=-50))
#scale_color_gradientn(limits = c(1,170), colours=colours, breaks=b, labels=format(b))
#scale_size_continuous(guide = FALSE) +
scale_size(range = c(1, 5), guide=F) +
scale_color_gradientn(colours = rainbow(5))+
labs(x = 'ARIMA p', y='ARIMA q', color='Tempo (h)')
ggsave('thesis/images/var_arima.png')
test <- c()
for(k in 1:length(p)){
test <- c(test, paste(p[k],d[k],q[k]))
}
unique(test)
autoplot(model)
subset <- window(data, start=length(data)-365*24)
subset %>% autoplot()
subset %>% ur.kpss() %>% summary()
subset %>% diff() %>% autoplot()
subset  %>% diff() %>% ur.kpss() %>% summary()
era5 <- read_table2(path, skip=9, comment="--")
era5 %>%
tail(-3) %>%
mutate(stamp=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(year=year(stamp), month=month(stamp,label=TRUE, abbr=FALSE)) %>%
group_by(year, month) %>%
summarize(speed = mean(c_ws, na.rm = T)) -> monthly.data
monthly.data <- ts(monthly.data$speed, start=c(2000,1), frequency=12)
monthly.data %>% autoplot()
monthly.data %>% nsdiffs()
monthly.data %>% diff(lag=12) %>% autoplot()
monthly.data %>% diff(lag=12) %>% nsdiffs()
window.size <- 12
forecast.horizon <- 1
#raw.data <- era5$c_ws
#end <- length(raw.data)
#start <- end-24*7*2
#data <- raw.data[start:end]
data <- monthly.data
forecast.lower80 <- c()
forecast.lower95 <- c()
forecast.mean <- c()
forecast.upper <- c()
forecast.upper80 <- c()
forecast.upper95 <- c()
p <- c()
d <- c()
q <- c()
for(k in 0:(length(data)-window.size)) {
train <- subset(data, start=(1+k), end=window.size+k)
model <- auto.arima(train)
print(c(k,length(data)-window.size,as.character(model)))
result <- forecast(model, h=forecast.horizon)
forecast.lower80 <- c(forecast.lower80, result$lower[1])
forecast.lower95 <- c(forecast.lower95, result$lower[2])
forecast.mean <- c(forecast.mean, result$mean[1])
forecast.upper80 <- c(forecast.upper80, result$upper[1])
forecast.upper95 <- c(forecast.upper95, result$upper[2])
r <- str_match(as.character(model), "ARIMA\\((\\d),(\\d),(\\d)\\)")
p <- c(p, r[2])
d <- c(d, r[3])
q <- c(q, r[4])
}
window(data, end=2004) %>% autoplot()
window(data, end=2004) %>% nsdiffs()
window(data, end=2004) %>% auto.arima()
subset(data, start=1, end=window.size)
data %>% ggseasonplot()
data %>% ggseasonplot(polar=T)
result <- c()
result$x <-ts(data)
result$mean <- ts(forecast.mean, start=window.size)
result$lower <- ts.union('80%'=ts(forecast.lower80, start=window.size), '95%'=ts(forecast.lower95, start=window.size))
result$upper <- ts.union('80%'=ts(forecast.upper80, start=window.size), '95%'=ts(forecast.upper95, start=window.size))
result$level <- c(80, 95)
class(result) <- "forecast"
result %>%  autoplot(series='Forecast') +
autolayer(ts(data), series = 'Measured')
ggplot.data <- c(data[1:length(data)], forecast.mean)
type <- c(rep('measured', length(data)), rep('forecast', length(forecast.mean)))
time <- c(1:length(data), (length(data)-length(forecast.mean)+1):length(data))
nans <- rep(NA, length(data))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(data)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
#geom_ribbon(aes(ymin=lower95, ymax=upper95), fill = '#C3C3F6') +
#geom_ribbon(aes(ymin=lower80, ymax=upper80), fill = '#7D7DEF') +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95% level'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80% level'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="fill") +
scale_color_manual(values = c('gold','black'))
#scale_color_manual(values=c('#7D7DEF', '#C3C3F6'), name="other")
#geom_line(aes(y=forecast.speed), color='white')
#green #00BA38
#red #F8766D
#95: #C3C3F6
#80: #7D7DEF
#dark green #02401B
library(RColorBrewer)
display.brewer.all(colorblindFriendly = TRUE)
#install.packages('wesanderson')
library(wesanderson)
names(wes_palettes)
df1 %>% ggplot(aes(x=time)) +
geom_line(aes(y=speed, colour=type), size=0.9)
auto.arima(data)
train <- window(data, end=2014)
fit <- Arima(train, order=c(2,0,1), seasonal=c(1,1,0)) %>% forecast(h=96)
fit %>% autoplot()
data %>% autoplot() +
autolayer(fit$mean)
tail(era5,30*24) %>%
mutate(stamp=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(hour=hour(stamp), month=month(stamp,label=TRUE, abbr=FALSE)) %>%
#group_by(month, hour) %>%
#summarize(speed = mean(c_ws, na.rm = T)) %>%
rename(`Mês`=month, Hora=hour, Velocidade=c_ws) %>%
ggplot() + geom_line(aes(stamp, Velocidade))
tail(era5,-3) %>%
mutate(stamp=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(hour=hour(stamp), month=month(stamp,label=TRUE, abbr=FALSE)) %>%
#group_by(month, hour) %>%
#summarize(speed = mean(c_ws, na.rm = T)) %>%
rename(`Mês`=month, Hora=hour, Velocidade=c_ws) %>%
ggplot() + geom_line(aes(stamp, Velocidade))
x <- era5$c_ws
x <- x[(length(x)-24*7):length(x)] %>% ts()
model <- Arima(x, order=c(1,1,0))
model %>% forecast(h=12) %>% autoplot()
model %>% accuracy()
fARIMA110 <- function(x, h){forecast(Arima(x, order=c(1,1,0)), h=h)}
x %>% tsCV(fARIMA110, h=1) %>% mean(na.rm=T) %>% .^2 %>% sqrt()
x %>% fARIMA110(h=1) %>% residuals() %>% mean(na.rm=T) %>% .^2 %>% sqrt()
setwd('/home/diogo/Jupyter/tdef')
library(tidyverse)
path <- '/home/diogo/Jupyter/tdef/Res025_ERA5.txt'
era5 <- read_table2(path, skip=9, comment="--")
library(lubridate)
tail(era5,-3) %>%
mutate(stamp=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(hour=hour(stamp), month=month(stamp,label=TRUE, abbr=FALSE)) %>%
group_by(month, hour) %>%
summarize(speed = mean(c_ws, na.rm = T)) %>%
rename(`Mês`=month, Hora=hour, Velocidade=speed) %>%
ggplot() + geom_smooth(aes(Hora, Velocidade, color=`Mês`), se = F) + scale_x_discrete(limits=0:23) +
labs(x='Tempo (h)', y='Velocidade (m/s)')
era5
library(forecast)
era5$c_ws %>%
tail(4*365) %>%
msts(seasonal.periods=4*365) %>%
ggseasonplot(c_ws, polar=T)
setwd('/home/diogo/Jupyter/tdef')
library(tidyverse)
path <- '/home/diogo/Jupyter/tdef2/Res025_ERA5.txt'
era5 <- read_table2(path, skip=9, comment="--")
library(lubridate)
tail(era5,-3) %>%
mutate(stamp=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(hour=hour(stamp), month=month(stamp,label=TRUE, abbr=FALSE)) %>%
group_by(month, hour) %>%
summarize(speed = mean(c_ws, na.rm = T)) %>%
rename(`Mês`=month, Hora=hour, Velocidade=speed) %>%
ggplot() + geom_smooth(aes(Hora, Velocidade, color=`Mês`), se = F) + scale_x_discrete(limits=0:23) +
labs(x='Tempo (h)', y='Velocidade (m/s)')
setwd('/home/diogo/Jupyter/tdef2')
ggsave('thesis/images/diurnal.png')
