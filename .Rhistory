library(FinTS)
library(tseries)
library(rugarch)
library(chron)
library(dplyr)
df <- select(df, -c(speed))
fdf <- join(forecast.mean, df, by='interval')
fdf$x <- 1:nrow(fdf)
library(plyr)
df <- select(df, -c(speed))
fdf <- join(forecast.mean, df, by='interval')
fdf$x <- 1:nrow(fdf)
plot2 <- fdf %>% ggplot(aes(x=x)) + geom_line(aes(y=power)) +
labs(x = 'Tempo (hora)', y = 'Potência (kW)') +
ggtitle('Potência desenvolvida por uma turbina em base horária')
plot1 <- fdf %>% ggplot(aes(x=x)) + geom_line(aes(y=speed)) +
labs(x = 'Tempo (hora)', y = 'Velocidade (m/s)') +
ggtitle('Velocidade do vento em base horária')
require(gridExtra)
grid.arrange(plot1, plot2, nrow=2)
ggsave('thesis/images/speed_power.png', arrangeGrob(plot1, plot2))
plot2 <- fdf %>% ggplot(aes(x=x)) + geom_line(aes(y=power)) +
labs(x = 'Tempo (hora)', y = 'Potência (kW)') +
ggtitle('Potência desenvolvida por uma turbina em base horária')
plot2
plot1 <- fdf %>% ggplot(aes(x=x)) + geom_line(aes(y=speed)) +
labs(x = 'Tempo (hora)', y = 'Velocidade (m/s)') +
ggtitle('Velocidade do vento em base horária')
plot1
path <- '/home/diogo/Jupyter/tdef2/Vestas V150-4.0-4.2 MW PO1.txt'
df <- read.table(path, col.names=c('speed', 'power')) %>% add_row(speed=26.5, power=0) %>% as_tibble()
df %>% ggplot(aes(x=speed, y=power)) + geom_line() +
labs(x = 'Velocidade (m/s)', y = 'Potência (kW)') +
ggtitle('Curva de potência de uma turbina genérica')
ggsave('thesis/images/power_curve.png')
forecast.mean <- tibble(speed=modelroll@forecast$density[,'Mu'])
forecast.mean$interval <- cut(forecast.mean$speed, breaks=c(-1,df$speed))
df$interval <- cut(df$speed, breaks=c(-1,df$speed))
library(plyr)
df <- select(df, -c(speed))
fdf <- join(forecast.mean, df, by='interval')
fdf$x <- 1:nrow(fdf)
path <- '/home/diogo/Jupyter/tdef2/Vestas V150-4.0-4.2 MW PO1.txt'
df <- read.table(path, col.names=c('speed', 'power')) %>% add_row(speed=26.5, power=0) %>% as_tibble()
df %>% ggplot(aes(x=speed, y=power)) + geom_line() +
labs(x = 'Velocidade (m/s)', y = 'Potência (kW)') +
ggtitle('Curva de potência de uma turbina genérica')
df
df$interval <- cut(df$speed, breaks=c(-1,df$speed))
library(plyr)
df <- select(df, -c(speed))
library(tidyr)
df <- select(df, -c(speed))
path <- '/home/diogo/Jupyter/tdef2/Vestas V150-4.0-4.2 MW PO1.txt'
df <- read.table(path, col.names=c('speed', 'power')) %>% add_row(speed=26.5, power=0) %>% as_tibble()
df %>% ggplot(aes(x=speed, y=power)) + geom_line() +
labs(x = 'Velocidade (m/s)', y = 'Potência (kW)') +
ggtitle('Curva de potência de uma turbina genérica')
ggsave('thesis/images/power_curve.png')
forecast.mean <- tibble(speed=modelroll@forecast$density[,'Mu'])
forecast.mean$interval <- cut(forecast.mean$speed, breaks=c(-1,df$speed))
df$interval <- cut(df$speed, breaks=c(-1,df$speed))
library(tidyr)
df <- select(df, -c(speed))
df
library(dplyr)
df <- select(df, -c(speed))
df
library(tidyverse)
library(lubridate)
library(forecast)
library(FinTS)
library(tseries)
library(rugarch)
library(chron)
path <- '/home/diogo/Jupyter/tdef2/Vestas V150-4.0-4.2 MW PO1.txt'
df <- read.table(path, col.names=c('speed', 'power')) %>% add_row(speed=26.5, power=0) %>% as_tibble()
df %>% ggplot(aes(x=speed, y=power)) + geom_line() +
labs(x = 'Velocidade (m/s)', y = 'Potência (kW)') +
ggtitle('Curva de potência de uma turbina genérica')
forecast.mean <- tibble(speed=modelroll@forecast$density[,'Mu'])
forecast.mean$interval <- cut(forecast.mean$speed, breaks=c(-1,df$speed))
df$interval <- cut(df$speed, breaks=c(-1,df$speed))
df <- select(df, -c(speed))
fdf <- plyr::join(forecast.mean, df, by='interval')
fdf$x <- 1:nrow(fdf)
plot2 <- fdf %>% ggplot(aes(x=x)) + geom_line(aes(y=power)) +
labs(x = 'Tempo (hora)', y = 'Potência (kW)') +
ggtitle('Potência desenvolvida por uma turbina em base horária')
plot1 <- fdf %>% ggplot(aes(x=x)) + geom_line(aes(y=speed)) +
labs(x = 'Tempo (hora)', y = 'Velocidade (m/s)') +
ggtitle('Velocidade do vento em base horária')
require(gridExtra)
grid.arrange(plot1, plot2, nrow=2)
ggsave('thesis/images/speed_power.png', arrangeGrob(plot1, plot2))
grid.arrange(plot1, plot2, nrow=2)
ggsave('thesis/images/speed_power.png', arrangeGrob(plot1, plot2))
setwd('/home/diogo/Jupyter/tdef2')
ggsave('thesis/images/speed_power.png', arrangeGrob(plot1, plot2))
week_data <- data[(nrow(data)-24*7*3):nrow(data),]$speed %>% diff() %>% ts()
plot1 <- data[(nrow(data)-24*7*3):nrow(data),]$speed %>% ts() %>% autoplot()
plot2 <- week_data %>% autoplot()
ggsave('thesis/images/last3weeks.png', arrangeGrob(plot1, plot2))
library(forecast)
library(tidyverse)
library(lubridate)
library(tidyverse)
library(forecast)
library(fpp)
library(fpp2)
require(gridExtra)
library(fitdistrplus)
library(logspline)
setwd('/home/diogo/Jupyter/tdef2')
path <- '/home/diogo/Jupyter/tdef2/Res025_ERA5.txt'
data <- read_table2(path, skip=9, comment="--") %>%
tail(-3) %>%
mutate(time=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(hour=hour(time), day=date(time), month=month(time,label=TRUE, abbr=FALSE), year=year(time)) %>%
mutate(year_month = paste(year, month)) %>%
rename(speed=c_ws)
data[(nrow(data)-365*24*2):nrow(data),] %>%
mutate(time=as_date(time)) %>%
ggplot() + geom_line(aes(time, speed)) +
scale_x_date(date_labels = "%b %y", date_breaks = "month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = 'Tempo (hora)', y = 'Velocidade (m/s)') +
ggtitle('Velocidade do vento em base horária')
ggsave('thesis/images/entire_series_hourly_basis.png')
data[(nrow(data)-365*24*2):nrow(data),] %>%
mutate(time=as_date(time), speed=c(0,diff(speed))) %>%
ggplot() + geom_line(aes(time, speed)) +
scale_x_date(date_labels = "%b %y", date_breaks = "month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = 'Tempo (hora)', y = 'Velocidade (m/s)') +
ggtitle('Velocidade do vento em base horária')
ggsave('thesis/images/entire_series_hourly_basis_seasonless.png')
data[(nrow(data)-365*24*2):nrow(data),] %>%
mutate(time=as_date(time), speed=c(rep(0,12),diff(speed, lag=12))) %>%
ggplot() + geom_line(aes(time, speed)) +
scale_x_date(date_labels = "%b %y", date_breaks = "month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = 'Tempo (hora)', y = 'Velocidade (m/s)') +
ggtitle('Velocidade do vento em base horária')
ggsave('thesis/images/entire_series_hourly_basis_seasonless_boxcox.png')
kpss.test(data[(nrow(data)-24*7*3):nrow(data),]$speed)
data[(nrow(data)-24*7*3):nrow(data),]$speed %>% ndiffs()
data[(nrow(data)-365*24*2):nrow(data),]$speed %>% diff(lag=12) %>%
kpss.test(data[(nrow(data)-365*24*2):nrow(data),]$speed)
adf.test(data[(nrow(data)-365*24*2):nrow(data),]$speed, alternative = "stationary")
data[(nrow(data)-365*24*2):nrow(data),]$speed %>% ndiffs()
data[(nrow(data)-365*24*2):nrow(data),]$speed %>% diff(order=2) %>% BoxCox(lambda = 1.18) %>% ts() %>% autoplot()
ggsave('thesis/images/boxcox.png')
png(file='thesis/images/long_memory.png')
data[(nrow(data)-365*24*2):nrow(data),]$speed %>% diff() %>% ts %>% ggtsdisplay()
dev.off()
data[(nrow(data)-365*24*2):nrow(data),]$speed %>% diff() %>% ts %>% Acf(lag.max=400) %>% autoplot()
ggsave('thesis/images/long_memory_lagmax.png')
week_data <- data[(nrow(data)-24*7*3):nrow(data),]$speed %>% diff() %>% ts()
plot1 <- data[(nrow(data)-24*7*3):nrow(data),]$speed %>% ts() %>% autoplot()
plot2 <- week_data %>% autoplot()
ggsave('thesis/images/last3weeks.png', arrangeGrob(plot1, plot2))
week_data %>% ggtsdisplay()
ggsave('thesis/images/last3weeks_acf.png')
ggsave('thesis/images/last3weeks_acf.png', week_data %>% ggtsdisplay())
png(file='thesis/images/last3weeks_acf.png')
week_data %>% ggtsdisplay()
dev.off()
?goog
#measured.series <- ts(data)
#forecast.mean$lower <- forecast.lower
#forecast.mean$upper <- forecast.upper
result <- c()
result$x <-ts(data)
result$mean <- ts(forecast.mean, start=window.size)
result$lower <- ts.union('80%'=ts(forecast.lower80, start=window.size), '95%'=ts(forecast.lower95, start=window.size))
result$upper <- ts.union('80%'=ts(forecast.upper80, start=window.size), '95%'=ts(forecast.upper95, start=window.size))
result$level <- c(80, 95)
class(result) <- "forecast"
result %>%  autoplot(series='Forecast') +
autolayer(ts(data), series = 'Measured')
ggplot.data <- c(data, forecast.mean)
type <- c(rep('measured', length(data)), rep('forecast', length(forecast.mean)))
time <- c(1:length(data), (length(data)-length(forecast.mean)+1):length(data))
nans <- rep(NA, length(data))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(data)+1):length(ggplot.data),]
library(tidyverse)
library(lubridate)
library(forecast)
library(urca)
library(fpp)
setwd('/home/diogo/Jupyter/tdef')
path <- '/home/diogo/Jupyter/tdef/Res025_ERA5.txt'
era5 <- read_table2(path, skip=9, comment="--")
tail(era5,-3) %>%
mutate(stamp=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(hour=hour(stamp), month=month(stamp,label=TRUE, abbr=FALSE)) %>%
group_by(month, hour) %>%
summarize(speed = mean(c_ws, na.rm = T)) %>%
rename(`Mês`=month, Hora=hour, Velocidade=speed) %>%
ggplot() + geom_smooth(aes(Hora, Velocidade, color=`Mês`), se = F) + scale_x_discrete(limits=0:23)
tail(era5)
nsdiffs(era5$c_ws)
nsdiffs(elecequip)
nsdiffs(usmelec)
era5$c_ws
era5['c_ws']
elecequip
usmelec
AirPassengers
euretail
h02
class(h02)
class(era5$c_ws)
?ts
?msts
#frequency is the number of observations per season
#if my season is a day then there are 24 observations per season
#if my season is a week then there are 24*7 observations per season
#if my season is a month then there are 24*30.44 observations per season
#if my season is a year then there are 24*365.25 observations per season
data <- tail(era5$c_ws, n=365*24*4)
data <- ts(data)
data %>% ggtsdisplay()
data %>% diff() %>% ggtsdisplay()
data %>%  diff() %>% ggtsdisplay(lag.max=100)
data %>%  diff(lag=365.25*24) %>% ggtsdisplay(lag.max=100)
#data <- msts(data, seasonal.periods=c(24, 168, 8766))
data <- diff(data, lag=365.25*24)
#BoxCox.lambda(data)
#data <- BoxCox(data, lambda = 1.030897)
data
data %>% ggtsdisplay()
data %>% diff() %>% ggtsdisplay(lag.max=40)
data %>% diff(lag=365*24) %>% diff() %>% ggtsdisplay(lag.max=120)
data %>% diff(lag=365.25*24) %>% ggtsdisplay(lag.max=120)
nsdiffs(data)
#autoplot(taylor)
#taylor %>% tbats() %>% forecast() %>% autoplot()
c(24, 24*7, 365.25*24)
data  %>%
Arima(order=c(5,1,2), seasonal=c(0,1,1)) %>%
residuals() %>% ggtsdisplay()
window.size <- 24*7
forecast.horizon <- 1
raw.data <- era5$c_ws
end <- length(raw.data)
start <- end-24*7*2
data <- raw.data[start:end]
forecast.lower80 <- c()
forecast.lower95 <- c()
forecast.mean <- c()
forecast.upper <- c()
forecast.upper80 <- c()
forecast.upper95 <- c()
p <- c()
d <- c()
q <- c()
for(k in 0:(length(data)-window.size)) {
train <- data[(1+k):(window.size+k)]
model <- auto.arima(train)
print(c(k,length(data)-window.size,as.character(model)))
result <- forecast(model, h=forecast.horizon)
forecast.lower80 <- c(forecast.lower80, result$lower[1])
forecast.lower95 <- c(forecast.lower95, result$lower[2])
forecast.mean <- c(forecast.mean, result$mean[1])
forecast.upper80 <- c(forecast.upper80, result$upper[1])
forecast.upper95 <- c(forecast.upper95, result$upper[2])
r <- str_match(as.character(model), "ARIMA\\((\\d),(\\d),(\\d)\\)")
p <- c(p, r[2])
d <- c(d, r[3])
q <- c(q, r[4])
}
#measured.series <- ts(data)
#forecast.mean$lower <- forecast.lower
#forecast.mean$upper <- forecast.upper
result <- c()
result$x <-ts(data)
result$mean <- ts(forecast.mean, start=window.size)
result$lower <- ts.union('80%'=ts(forecast.lower80, start=window.size), '95%'=ts(forecast.lower95, start=window.size))
result$upper <- ts.union('80%'=ts(forecast.upper80, start=window.size), '95%'=ts(forecast.upper95, start=window.size))
result$level <- c(80, 95)
class(result) <- "forecast"
result %>%  autoplot(series='Forecast') +
autolayer(ts(data), series = 'Measured')
ggplot.data <- c(data, forecast.mean)
type <- c(rep('measured', length(data)), rep('forecast', length(forecast.mean)))
time <- c(1:length(data), (length(data)-length(forecast.mean)+1):length(data))
nans <- rep(NA, length(data))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(data)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
#geom_ribbon(aes(ymin=lower95, ymax=upper95), fill = '#C3C3F6') +
#geom_ribbon(aes(ymin=lower80, ymax=upper80), fill = '#7D7DEF') +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95%'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80%'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="Nível") +
scale_color_manual(values = c('gold','black'), name='Série', labels = c("previsão", "medida")) +
labs(x='Tempo (h)', y='Velocidade (m/s)') +
#geom_line(aes(y=forecast.speed), color='white')
ggsave('thesis/images/var_result.png')
my_accuracy <- function(forecast, observed){
accuracy(forecast, observed[(length(observed)-length(forecast)+1):length(observed)])
}
garch_plot <- function(data, modelroll, title, filename, multiplier, forecast_length){
measured <- data[(length(data)-multiplier*forecast_length):(length(data)-1)]
print(measured %>% length())
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(30%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(10%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(70%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(90%)']
print(forecast.mean %>% length())
print(forecast_length)
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(measured)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95%'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80%'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.7) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="Nível") +
scale_color_manual(values = c('gold','black'), name='Série', labels = c("previsão", "medida")) +
labs(x='Tempo (h)', y='Velocidade (m/s)') +
ggtitle(title)
ggsave(paste('thesis/images', filename, sep='/'))
# print(my_accuracy(forecast.mean, measured))
my_accuracy(forecast.mean, measured)
}
forecast_length <- 24*7
result <- do_hourly_garch(path, forecast_length)
hourly.data <- result[[1]]
modelroll <- result[[2]]
title <- paste('GARCH(1,1) com janela de 50 horas e passo de 1 hora')
garch_plot(hourly.data, modelroll, title, 'garch_first.png', 4, forecast_length)
path <- '/home/diogo/Jupyter/tdef2/Vestas V150-4.0-4.2 MW PO1.txt'
forecast_length <- 48
do_monthly_garch <- function(path, forecast_length){
era5 <- read_table2(path, skip=9, comment="--")
era5 %>%
tail(-3) %>%
mutate(stamp=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(year=year(stamp), month=month(stamp,label=TRUE, abbr=FALSE)) %>%
group_by(year, month) %>%
summarize(speed = mean(c_ws, na.rm = T)) -> monthly.data
monthly.data <- ts(monthly.data$speed, start=c(2000,1), frequency=12)
monthly.data %>% autoplot()
ugarch_spec <- ugarchspec(variance.model = list(model='gjrGARCH', garchOrder = c(1,1)),
mean.model = list(armaOrder = c(1,0), include.mean = T),
distribution.model =  "sstd")
ugarch_spec
#fit <- ugarchfit(spec = ugarch_spec, data = hourly.data)#, solver = 'hybrid')
#defaults: ugarchforecast(fitORspec, data = NULL, n.ahead = 10, n.roll = 0, out.sample = 0)
monthly.data %>% length() #169
#forecast <- ugarchforecast(fit, n.roll = 169, out.sample = 30000200)
#forecast %>% plot(which=1)
modelroll <- ugarchroll (
spec=ugarch_spec, data=monthly.data, n.ahead = 1, forecast_length = forecast_length,
n.start = NULL, refit.every = 4, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = T, VaR.alpha = c(0.3, 0.7, 0.1, 0.90),
cluster = NULL, keep.coef = F
)
c(monthly.data, modelroll)
}
result <- do_monthly_garch(path, forecast_length)
monthly.data <- result[0]
modelroll <- result[1]
title <- paste('GARCH(1,1) com janela de 4 meses e passo de 1 mês')
garch_plot(monthly.data, modelroll, title, 'garch_month.png', 4, forecast_length)
garch_plot <- function(data, modelroll, title, filename, multiplier, forecast_length){
measured <- data[(length(data)-multiplier*forecast_length):(length(data)-1)]
print(measured %>% length())
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(30%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(10%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(70%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(90%)']
print(forecast.mean %>% length())
print(forecast_length)
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(measured)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95%'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80%'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="Nível") +
scale_color_manual(values = c('gold','black'), name='Série', labels = c("previsão", "medida")) +
labs(x='Tempo (h)', y='Velocidade (m/s)') +
ggtitle(title)
ggsave(paste('thesis/images', filename, sep='/'))
# print(my_accuracy(forecast.mean, measured))
my_accuracy(forecast.mean, measured)
}
forecast_length <- 48
result <- do_monthly_garch(path, forecast_length)
monthly.data <- result[0]
modelroll <- result[1]
title <- paste('GARCH(1,1) com janela de 4 meses e passo de 1 mês')
garch_plot(monthly.data, modelroll, title, 'garch_month.png', 4, forecast_length)
library(tidyverse)
library(lubridate)
library(forecast)
library(FinTS)
library(tseries)
library(rugarch)
library(chron)
setwd('/home/diogo/Jupyter/tdef2')
path <- '/home/diogo/Jupyter/tdef2/Res025_ERA5.txt'
my_accuracy <- function(forecast, observed){
accuracy(forecast, observed[(length(observed)-length(forecast)+1):length(observed)])
}
garch_plot <- function(data, modelroll, title, filename, multiplier, forecast_length){
measured <- data[(length(data)-multiplier*forecast_length):(length(data)-1)]
print(measured %>% length())
forecast.lower80 <- modelroll@forecast$VaR[,'alpha(30%)']
forecast.lower95 <- modelroll@forecast$VaR[,'alpha(10%)']
forecast.mean <- modelroll@forecast$density[,'Mu']
forecast.upper80 <- modelroll@forecast$VaR[,'alpha(70%)']
forecast.upper95 <- modelroll@forecast$VaR[,'alpha(90%)']
print(forecast.mean %>% length())
print(forecast_length)
ggplot.data <- c(measured[1:length(measured)], forecast.mean)
type <- c(rep('measured', length(measured)), rep('forecast', length(forecast.mean)))
time <- c(1:length(measured), (length(measured)-length(forecast.mean)+1):length(measured))
nans <- rep(NA, length(measured))
df1 <- tibble(time=time, speed=ggplot.data, type=type,
lower80=c(nans, forecast.lower80), upper80=c(nans, forecast.upper80),
lower95=c(nans, forecast.lower95), upper95=c(nans, forecast.upper95))
df2 <- df1[(length(measured)+1):length(ggplot.data),]
ggplot(data=df2, aes(x=time)) +
geom_ribbon(aes(ymin=lower95, ymax=upper95, fill='95%'), alpha=1) +
geom_ribbon(aes(ymin=lower80, ymax=upper80, fill='80%'), alpha=1) +
geom_line(data=df1, aes(y=speed, colour=type), size=0.9) +
scale_fill_manual(values=c('#7D7DEF', '#C3C3F6'), name="Nível") +
scale_color_manual(values = c('gold','black'), name='Série', labels = c("previsão", "medida")) +
labs(x='Tempo (h)', y='Velocidade (m/s)') +
ggtitle(title)
ggsave(paste('thesis/images', filename, sep='/'))
# print(my_accuracy(forecast.mean, measured))
my_accuracy(forecast.mean, measured)
}
do_hourly_garch <- function(path, forecast_length){
data <- read_table2(path, skip=9, comment="--") %>%
tail(-3) %>%
mutate(time=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(hour=hour(time), day=date(time), month=month(time,label=TRUE, abbr=FALSE), year=year(time)) %>%
mutate(year_month = paste(year, month)) %>%
rename(speed=c_ws)
hourly.data <- data[(nrow(data)-365*24):nrow(data),]$speed
print(hourly.data %>% length())
ugarch_spec <- ugarchspec(variance.model = list(model='gjrGARCH', garchOrder = c(1,1)),
mean.model = list(armaOrder = c(1,0), include.mean = T),
distribution.model =  "sstd")
modelroll <- ugarchroll (
spec=ugarch_spec, data=hourly.data, n.ahead = 1, forecast_length = forecast_length,
n.start = NULL, refit.every = 50, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = T, VaR.alpha = c(0.3, 0.7, 0.1, 0.90),
cluster = NULL, keep.coef = F
)
list(hourly.data, modelroll)
}
forecast_length <- 24*7
do_monthly_garch <- function(path, forecast_length){
era5 <- read_table2(path, skip=9, comment="--")
era5 %>%
tail(-3) %>%
mutate(stamp=with_tz(ymd_hms(paste(Date, `Time(UTC)`)), tzone='Brazil/East')) %>%
mutate(year=year(stamp), month=month(stamp,label=TRUE, abbr=FALSE)) %>%
group_by(year, month) %>%
summarize(speed = mean(c_ws, na.rm = T)) -> monthly.data
monthly.data <- ts(monthly.data$speed, start=c(2000,1), frequency=12)
monthly.data %>% autoplot()
ugarch_spec <- ugarchspec(variance.model = list(model='gjrGARCH', garchOrder = c(1,1)),
mean.model = list(armaOrder = c(1,0), include.mean = T),
distribution.model =  "sstd")
ugarch_spec
#fit <- ugarchfit(spec = ugarch_spec, data = hourly.data)#, solver = 'hybrid')
#defaults: ugarchforecast(fitORspec, data = NULL, n.ahead = 10, n.roll = 0, out.sample = 0)
monthly.data %>% length() #169
#forecast <- ugarchforecast(fit, n.roll = 169, out.sample = 30000200)
#forecast %>% plot(which=1)
modelroll <- ugarchroll (
spec=ugarch_spec, data=monthly.data, n.ahead = 1, forecast_length = forecast_length,
n.start = NULL, refit.every = 4, refit.window = c("recursive"),
window.size = NULL, solver = "hybrid", fit.control = list(),
solver.control = list(), calculate.VaR = T, VaR.alpha = c(0.3, 0.7, 0.1, 0.90),
cluster = NULL, keep.coef = F
)
c(monthly.data, modelroll)
}
forecast_length <- 48
result <- do_monthly_garch(path, forecast_length)
warnings()
